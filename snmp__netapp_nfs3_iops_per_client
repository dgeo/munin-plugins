#!/usr/bin/env python
# 
### LICENSE
#
# Copyright (c) 2012, Torsten Rehn <torsten@rehn.tel>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above 
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
### USAGE
#
# ssh root@10.11.12.13 options nfs.per_client_stats.enable on
#
# ln -s /usr/.../snmp__netapp_nfs3_iops_per_client /etc/munin/plugins/snmp_10.11.12.13_netapp_nfs3_iops_per_client
#
# vi /etc/munin/munin.conf
# 	[netapp.example.com]
# 		address 127.0.0.1
# 		host_name netapp.example.com
#
# vi /etc/munin/plugin-conf.d/munin-node
# 	[snmp_10.11.12.13_*]
# 	host_name netapp.example.com
# 	user root
# 	env.community public
#
#%# family=auto
#%# capabilities=autoconf

from os import environ
from re import match
from subprocess import check_output
from sys import argv, exit

BLOCK_SIZES = (
    '512',
    '1k',
    '2k',
    '4k',
    '8k',
    '16k',
    '32k',
    '64k',
    '128k',
)

community = environ.get('community', 'public')
host = match(r'(.*)snmp_(?P<host>[^_]*)_(.*)', argv[0]).groupdict()['host']

config = (len(argv) == 2 and argv[1] == 'config')

def snmpget(*args):
    oid = '.'.join(args)
    return check_output(
        'snmpget -Oqv -v 2c -c {0} {1} {2}'.format(
            community,
            host,
            oid,
        ),
        shell = True,
    ).strip()

if len(argv) == 2 and argv[1] == 'autoconfig':
    print('yes')
    exit(0)
elif config:
    print('host_name ' + host)
    
client_ips = check_output(
        'snmpwalk -Oqv -v 2c -c {0} {1} {2}'.format(
            community,
            host,
            '1.3.6.1.4.1.789.1.3.1.3.1.1.1',
        ),
        shell = True
    ).strip()

if 'OID' in client_ips:
    print('ERROR: No client statistics found.')
    print('Did you set \'options nfs.per_client_stats.enable on\'?')
    exit(1)

client_ips = client_ips.split('\n')

totals_read = {}
totals_write = {}

for ip in client_ips:
    ip_safe = ip.replace('.', '_')
    
    # reads for IP by block size
    print('multigraph nfs3_iops_pc_reads_' + ip_safe)
    oid_prefix = '1.3.6.1.4.1.789.1.3.1.3.1.1'
    if config:
        print('graph_title NFSv3 read calls by block size for ' + ip)
        print('graph_args --base 1000 --slope-mode')
        print('graph_vlabel IOPS')
        print('graph_category disk')
        for size in BLOCK_SIZES:
            print('bs{0}_{1}.label {1}'.format(ip_safe, size))
            print('bs{0}_{1}.type COUNTER'.format(ip_safe, size))
            print('bs{0}_{1}.draw AREASTACK'.format(ip_safe, size))
    else:
        totals_read[ip] = 0
        for i in range(len(BLOCK_SIZES)):
            size = BLOCK_SIZES[i]
            opcount = snmpget(oid_prefix, str(i+108), ip)
            print('bs{0}_{1}.value {2}'.format(ip_safe, size, opcount))
            totals_read[ip] += int(opcount)
    
    # writes for IP by block size
    print('multigraph nfs3_iops_pc_writes_' + ip_safe)
    oid_prefix = '1.3.6.1.4.1.789.1.3.1.3.1.1'
    if config:
        print('graph_title NFSv3 write calls by block size for ' + ip)
        print('graph_args --base 1000 --slope-mode')
        print('graph_vlabel IOPS')
        print('graph_category disk')
        for size in BLOCK_SIZES:
            print('bs{0}_{1}.label {1}'.format(ip_safe, size))
            print('bs{0}_{1}.type COUNTER'.format(ip_safe, size))
            print('bs{0}_{1}.draw AREASTACK'.format(ip_safe, size))
    else:
        totals_write[ip] = 0
        for i in range(len(BLOCK_SIZES)):
            size = BLOCK_SIZES[i]
            opcount = snmpget(oid_prefix, str(i+117), ip)
            print('bs{0}_{1}.value {2}'.format(ip_safe, size, opcount))
            totals_write[ip] += int(opcount)

# reads by client
print('multigraph nfs3_iops_pc_reads')
if config:
    print('graph_title NFSv3 read calls by client')
    print('graph_args --base 1000 --slope-mode')
    print('graph_vlabel IOPS')
    print('graph_category disk')
for ip in client_ips:
    ip_safe = ip.replace('.', '_')
    if config:
        print('client_{0}.label {1}'.format(ip_safe, ip))
        print('client_{0}.type COUNTER'.format(ip_safe))
        print('client_{0}.draw AREASTACK'.format(ip_safe))
    else:
        print('client_{0}.value {1}'.format(ip_safe, totals_read[ip]))

# writes by client
print('multigraph nfs3_iops_pc_writes')
if config:
    print('graph_title NFSv3 write calls by client')
    print('graph_args --base 1000 --slope-mode')
    print('graph_vlabel IOPS')
    print('graph_category disk')
for ip in client_ips:
    ip_safe = ip.replace('.', '_')
    if config:
        print('client_{0}.label {1}'.format(ip_safe, ip))
        print('client_{0}.type COUNTER'.format(ip_safe))
        print('client_{0}.draw AREASTACK'.format(ip_safe))
    else:
        print('client_{0}.value {1}'.format(ip_safe, totals_write[ip]))
