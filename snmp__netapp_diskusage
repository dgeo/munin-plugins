#!/usr/bin/env python
# 
### LICENSE
#
# Copyright (c) 2012, Torsten Rehn <torsten@rehn.tel>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above 
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
### USAGE
#
# ln -s /usr/.../snmp__netapp_diskusage /etc/munin/plugins/snmp_10.11.12.13_netapp_diskusage
#
# vi /etc/munin/munin.conf
# 	[netapp.example.com]
# 		address 127.0.0.1
# 		host_name netapp.example.com
#
# vi /etc/munin/plugin-conf.d/munin-node
# 	[snmp_10.11.12.13_*]
# 	host_name netapp.example.com
# 	user root
# 	env.community public
#
#%# family=auto
#%# capabilities=autoconf

from hashlib import md5
from os import environ
from re import match
from subprocess import check_output
from sys import argv, exit

TYPE_TRAD_VOL = "1"
TYPE_FLEX_VOL = "2"
TYPE_AGGR = "3"
TYPE_AGGR_STRIPED = "4"
TYPE_VOL_STRIPED = "5"

community = environ.get("community", "public")
host = match(r"(.*)snmp_(?P<host>[^_]*)_(.*)", argv[0]).groupdict()["host"]

config = (len(argv) == 2 and argv[1] == "config")

def bytes(kbytes):
	return str(int(kbytes) * 1024)

def snmpget(*args):
	oid = ".".join(args)
	return check_output("snmpget -Oqv -v 2c -c {0} {1} {2}".format(community, host, oid), shell = True).strip()

if len(argv) == 2 and argv[1] == "autoconfig":
	print("yes")
	exit(0)
elif config:
	print("host_name " + host)

fs_ids = map(str, range(1, len(check_output(
	"snmpwalk -Oqv -v 2c -c {0} {1} 1.3.6.1.4.1.789.1.5.4.1.1".format(
		community,
		host
	),
	shell = True
).strip().split("\n"))+1))

for fs_id in fs_ids:
	oid_prefix = "1.3.6.1.4.1.789.1.5.4.1"

	name = snmpget(oid_prefix, "2", fs_id).strip("\"")
	if name.endswith("/.snapshot"):
		continue
	intname = md5(name).hexdigest()[:8]
	fstype = snmpget(oid_prefix, "23", fs_id)
	is_volume = fstype in (TYPE_TRAD_VOL, TYPE_FLEX_VOL, TYPE_VOL_STRIPED)
	
	# DISK USAGE
	
	print("multigraph disk_usage_" + intname)
	if config:
		if is_volume:
			print("graph_title disk usage for volume " + name)
		else:
			print("graph_title disk usage for aggregate " + name)
		print("graph_args --base 1024 --slope-mode")
		print("graph_vlabel bytes")
		print("graph_category disk")
		print("graph_info Used space includes deduplicated data. Deduplicated data is the actual amount of space " +
			"taken by the single copy of each deduplicated block, thus showing how much overlap there is among " +
			"file system data, but not taking into account how many duplicates there were prior to deduplication.")
		print("size.label usable size")
		print("size.draw AREASTACK")
		print("size.colour 54d14b")
		if is_volume:
			print("snapres.label snapshot reserve")
			print("snapres.draw AREASTACK")
			print("snapres.colour 008b89")
		print("used.label used")
		print("used.draw AREA")
		print("used.colour a83c3c")
		print("sisshared.label deduplicated")
		print("sisshared.draw AREA")
		print("sisshared.colour fddc00")
		print("free.label available")
		print("free.draw LINE0")
	else:
		size = bytes(snmpget(oid_prefix, "29", fs_id))
		used = bytes(snmpget(oid_prefix, "30", fs_id))
		free = bytes(snmpget(oid_prefix, "31", fs_id))
		sis_shared = bytes(snmpget(oid_prefix, "32", fs_id))
		if is_volume:
			snapres = bytes(snmpget(oid_prefix, "29", str(int(fs_id) + 1)))
			print("snapres.value " + snapres)
		print("size.value " + size)
		print("used.value " + used)
		print("sisshared.value " + sis_shared)
		print("free.value " + free)
	
	# SNAPSHOT RESERVE
	
	if is_volume:
		print("multigraph snapres_" + intname)
		if config:
			print("graph_title snapshot reserve for volume " + name.strip("\""))
			print("graph_args --base 1024 --slope-mode")
			print("graph_vlabel bytes")
			print("graph_category disk")
			print("sused.label used")
			print("sused.draw AREASTACK")
			print("sused.colour 006d8c")
			print("sfree.label available")
			print("sfree.draw AREASTACK")
			print("sfree.colour 00dac3")
		else:
			used = bytes(snmpget(oid_prefix, "30", str(int(fs_id) + 1)))
			free = bytes(snmpget(oid_prefix, "31", str(int(fs_id) + 1)))
			print("sused.value " + used)
			print("sfree.value " + free)
	
	# SAVINGS
	
	if is_volume:
		print("multigraph savings_" + intname)
		if config:
			print("graph_title space savings for volume " + name)
			print("graph_args --base 1024 --slope-mode")
			print("graph_vlabel Bytes")
			print("graph_category disk")
			print("dedup.label deduplication")
			print("dedup.draw AREA")
			print("dedup.colour fddc00")
			print("comp.label compression")
			print("comp.draw AREA")
			print("comp.colour 780096")
		else:
			dedup_saved = bytes(snmpget(oid_prefix, "39", fs_id))
			comp_saved = bytes(snmpget(oid_prefix, "37", fs_id))
			print("dedup.value " + dedup_saved)
			print("comp.value " + comp_saved)
	
	# INODES
	
	print("multigraph inodes_" + intname)
	if config:
		if is_volume:
			print("graph_title inodes for volume " + name.strip("\""))
		else:
			print("graph_title inodes for aggregate " + name.strip("\""))
		print("graph_args --base 1000 --slope-mode")
		print("graph_vlabel inodes")
		print("graph_category disk")
		print("iused.label used")
		print("iused.draw AREASTACK")
		print("iused.colour a83c3c")
		print("ifree.label available")
		print("ifree.draw AREASTACK")
		print("ifree.colour 54d14b")
	else:
		used = bytes(snmpget(oid_prefix, "7", fs_id))
		free = bytes(snmpget(oid_prefix, "8", fs_id))
		print("iused.value " + used)
		print("ifree.value " + free)

